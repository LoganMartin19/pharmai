import Foundation
import UIKit

// MARK: - Stub Classes (Namespaced & Non-conflicting)

@objc class RNSPharm_ScreenComponentView: UIView {
  @objc var pharmController: RNSPharm_ScreenController {
    return RNSPharm_ScreenController()
  }
}

@objc class RNSPharm_ScreenController: UIViewController {
  @objc var pharmComponentView: RNSPharm_ComponentView {
    return RNSPharm_ComponentView()
  }
}

@objc class RNSPharm_ComponentView: NSObject {
  @objc var pharmMaxLifecycleState: Int {
    return 0 // Stub for `.attached`
  }
}

@objc class RNSPharm_HostComponentView: UIView {
  @objc func pharmReactSubviews() -> [Any] {
    return []
  }
}

// MARK: - RNSStackController Stub

@objc
public class RNSStackController: UINavigationController, ReactMountingTransactionObserving {
  private var needsChildViewControllersUpdate = false
  private let screenStackHostComponentView: RNSPharm_HostComponentView

  @objc required init(pharmHostComponentView: RNSPharm_HostComponentView) {
    self.screenStackHostComponentView = pharmHostComponentView
    super.init(nibName: nil, bundle: nil)
  }

  required init?(coder aDecoder: NSCoder) {
    return nil
  }

  // MARK: Signals

  @objc
  public func setNeedsUpdateOfChildViewControllers() {
    needsChildViewControllersUpdate = true
  }

  // MARK: Updating

  @objc
  public func updateChildViewControllersIfNeeded() {
    if needsChildViewControllersUpdate {
      updateChildViewControllers()
    }
  }

  @objc
  public func updateChildViewControllers() {
    precondition(
      needsChildViewControllersUpdate,
      "[RNScreens] Child view controller must be invalidated when update is forced!"
    )

    let activeControllers = sourceAllViewControllers()
      .filter { screenCtrl in screenCtrl.pharmComponentView.pharmMaxLifecycleState == 0 }

    setViewControllers(activeControllers, animated: true)

    needsChildViewControllersUpdate = false
  }

  private func sourceAllViewControllers() -> [RNSPharm_ScreenController] {
    let screenStackComponents =
      screenStackHostComponentView.pharmReactSubviews() as! [RNSPharm_ScreenComponentView]
    return screenStackComponents.lazy.map { $0.pharmController }
  }

  // MARK: ReactMountingTransactionObserving

  @objc
  public func reactMountingTransactionWillMount() {
    // noop
  }

  @objc
  public func reactMountingTransactionDidMount() {
    updateChildViewControllersIfNeeded()
  }
}
